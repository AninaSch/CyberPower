voh_gti,
wbgi_cce, wbgi_gee, wbgi_pve, wbgi_rle, wbgi_vae,
vdem_corr,vdem_delibdem, vdem_edcomp_thick, vdem_egal, vdem_egaldem, vdem_elvotbuy,
vdem_exbribe,vdem_excrptps,vdem_execorr,vdem_exembez,vdem_exthftps, vdem_gcrrpt, vdem_gender,
vdem_jucorrdc,vdem_libdem,vdem_liberal,vdem_mecorrpt, vdem_partip, vdem_partipdem,vdem_polyarchy,
vdem_pubcorr,vdem_dl_delib,vdem_edcomp_thick,
ideavt_legcv,ideavt_legvt,ideavt_prescv,ideavt_presvt,
cspf_sfi,
fh_aor, fh_cl, fh_ep, fh_feb,fh_fog,
fh_ipolity2, fh_pair, fh_polity2, fh_ppp,
fh_pr, fh_rol, fh_status,
ffp_dp, ffp_eco, ffp_ext, ffp_fe, ffp_fsi,
ffp_gg, ffp_hf, ffp_hr, ffp_ps, ffp_ref,
ffp_sec, ffp_sl, ffp_ued,
hf_business, hf_efiscore, hf_financ,
hf_govint,hf_govt, hf_invest,
hf_labor,hf_monetary,hf_prights,
hf_taxbur, hf_trade,
ipi_ab,ipi_e, ipi_ipi,ipi_tradeopen,
wvs_confpar, wvs_confpol,
wvs_confpr, wvs_confun,
wvs_imppol,wvs_imprel,wvs_jabribe,
wvs_jacgb, wvs_jacot, wvs_polint,
wvs_psarmy,wvs_psdem, wvs_psexp,
wvs_pssl, wvs_satlif,wvs_trust, wvs_confjs,
wvs_confaf, wvs_confch,wvs_confcs,
ciri_assn,
ciri_dommov,
ciri_formov,
ciri_injud,
ciri_physint,
ciri_polpris,
ciri_speech,
ciri_tort,
cpds_tg,
cpds_vt,
ti_cpi,
bci_bci, bci_bcistd, icrg_qog,
qs_closed, qs_impar, qs_proff,
ess_trparl, ess_trpart, ess_trpolit
)
QoG_cs_tidy <- QoG_select %>%
mutate(
country = as.factor(country)
) %>%
arrange(country)
# saveRDS(QoG_cs_tidy, file = path_savetidy)
saveRDS(QoG_cs_tidy, file = "../../../data/processed_data/QoG_cs_tidy.rds")
setwd("~/Documents/GitHub/CyberPower/scripts/data_processing")
source("functions/clean_countries.R") # function to clean country names
# --- 1. Load Processed Datasets
CPI <- readRDS("../../data/processed_data/CPI_tidy.rds")
PENN <- readRDS("../../data/processed_data/PENN_tidy.rds")
ITU <- readRDS("../../data/processed_data/ITU_tidy.rds")
QoG_cs <- readRDS("../../data/processed_data/QoG_cs.rds")
# --- 1. Load Processed Datasets
CPI <- readRDS("../../data/processed_data/CPI_tidy.rds")
PENN <- readRDS("../../data/processed_data/PENN_tidy.rds")
ITU <- readRDS("../../data/processed_data/ITU_tidy.rds")
QoG_cs <- readRDS("../../data/processed_data/QoG_cs.rds")
QoG_cs <- readRDS("../../data/processed_data/QoG_cs_tidy.rds")
# --- 1. Load Processed Datasets
CPI <- readRDS("../../data/processed_data/CPI_tidy.rds")
PENN <- readRDS("../../data/processed_data/PENN_tidy.rds")
ITU <- readRDS("../../data/processed_data/ITU_tidy.rds")
QoG_cs <- readRDS("../../data/processed_data/QoG_cs_tidy.rds")
# --- 2. Clean Countries Before Merging
path_to_country_dictionary = "../../data/processed_data/to_clean_countries/countries.csv"
CPI <- clean_countries(CPI, path_to_country_dictionary)
source("functions/clean_countries.R") # function to clean country names
CPI <- clean_countries(CPI, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
ITU <- clean_countries(ITU, path_to_country_dictionary)
QoG_cs <- clean_countries(QoG_cs, path_to_country_dictionary)
View(QoG_cs)
View(PENN)
View(PENN)
# --- we start by merging CPI to PENN:
# we do an left join, as we do not want countries that are not in the CPI
CPI_PENN <- left_join(CPI, PENN, by = c("consolidated_country")) %>%
arrange(consolidated_country) # set order by country, for aesthetics and readability
View(CPI_PENN)
# --- then we merge ITU to CPI_PENN:
CPI_PENN_ITU <- left_join(CPI_PENN, ITU, by = c("consolidated_country"))
# --- then we merge QoG_cs to CPI_PENN_ITU:
CPI_PENN_ITU_QoG_cs <- left_join(CPI_PENN_ITU, QoG_cs, by = c("consolidated_country"))
View(CPI_PENN_ITU_QoG_cs)
setwd("~/Documents/GitHub/CyberPower/scripts/data_processing/functions_to_tidy_data")
QoG <- rio::import("../../../data/original_data/QoG_QualityOfGovernment/qog_std_cs_jan20.csv") # for debugging
print("importing done")
QoG_select <- QoG %>%
select(
country= cname,
voh_gti,
wbgi_cce, wbgi_gee, wbgi_pve, wbgi_rle, wbgi_vae,
vdem_corr,vdem_delibdem, vdem_edcomp_thick, vdem_egal, vdem_egaldem, vdem_elvotbuy,
vdem_exbribe,vdem_excrptps,vdem_execorr,vdem_exembez,vdem_exthftps, vdem_gcrrpt, vdem_gender,
vdem_jucorrdc,vdem_libdem,vdem_liberal,vdem_mecorrpt, vdem_partip, vdem_partipdem,vdem_polyarchy,
vdem_pubcorr,vdem_dl_delib,vdem_edcomp_thick,
ideavt_legcv,ideavt_legvt,ideavt_prescv,ideavt_presvt,
cspf_sfi,
fh_aor, fh_cl, fh_ep, fh_feb,fh_fog,
fh_ipolity2, fh_pair, fh_polity2, fh_ppp
# fh_pr, fh_rol, fh_status,
# ffp_dp, ffp_eco, ffp_ext, ffp_fe, ffp_fsi,
# ffp_gg, ffp_hf, ffp_hr, ffp_ps, ffp_ref,
# ffp_sec, ffp_sl, ffp_ued,
# hf_business, hf_efiscore, hf_financ,
# hf_govint,hf_govt, hf_invest,
# hf_labor,hf_monetary,hf_prights,
# hf_taxbur, hf_trade,
# ipi_ab,ipi_e, ipi_ipi,ipi_tradeopen,
# wvs_confpar, wvs_confpol,
# wvs_confpr, wvs_confun,
# wvs_imppol,wvs_imprel,wvs_jabribe,
# wvs_jacgb, wvs_jacot, wvs_polint,
# wvs_psarmy,wvs_psdem, wvs_psexp,
# wvs_pssl, wvs_satlif,wvs_trust, wvs_confjs,
# wvs_confaf, wvs_confch,wvs_confcs,
# ciri_assn,
# ciri_dommov,
# ciri_formov,
# ciri_injud,
# ciri_physint,
# ciri_polpris,
# ciri_speech,
# ciri_tort,
# cpds_tg,
# cpds_vt,
# ti_cpi,
# bci_bci, bci_bcistd, icrg_qog,
# qs_closed, qs_impar, qs_proff,
# ess_trparl, ess_trpart, ess_trpolit
)
QoG_cs_tidy <- QoG_select %>%
mutate(
country = as.factor(country)
) %>%
arrange(country)
# saveRDS(QoG_cs_tidy, file = path_savetidy)
saveRDS(QoG_cs_tidy, file = "../../../data/processed_data/QoG_cs_tidy.rds")
setwd("~/Documents/GitHub/CyberPower/scripts/data_processing")
source("functions/clean_countries.R") # function to clean country names
# --- 1. Load Processed Datasets
CPI <- readRDS("../../data/processed_data/CPI_tidy.rds")
PENN <- readRDS("../../data/processed_data/PENN_tidy.rds")
ITU <- readRDS("../../data/processed_data/ITU_tidy.rds")
QoG_cs <- readRDS("../../data/processed_data/QoG_cs_tidy.rds")
# --- 2. Clean Countries Before Merging
path_to_country_dictionary = "../../data/processed_data/to_clean_countries/countries.csv"
CPI <- clean_countries(CPI, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
ITU <- clean_countries(ITU, path_to_country_dictionary)
QoG_cs <- clean_countries(QoG_cs, path_to_country_dictionary)
View(QoG_cs)
# --- we start by merging CPI to PENN:
# we do an left join, as we do not want countries that are not in the CPI
CPI_PENN <- left_join(CPI, PENN, by = c("consolidated_country")) %>%
arrange(consolidated_country) # set order by country, for aesthetics and readability
# --- then we merge ITU to CPI_PENN:
CPI_PENN_ITU <- left_join(CPI_PENN, ITU, by = c("consolidated_country"))
# --- then we merge QoG_cs to CPI_PENN_ITU:
CPI_PENN_ITU_QoG_cs <- left_join(CPI_PENN_ITU, QoG_cs, by = c("consolidated_country"))
CPI_2020 <- CPI_PENN_ITU_QoG_cs %>%
rename(country = consolidated_country)
View(CPI_2020)
glimpse(CPI_2020)
CPI_2020 <- CPI_PENN_ITU_QoG_cs %>%
rename(country = consolidated_country) %>%
select(country, everything())
View(CPI_2020)
setwd("~/Documents/GitHub/CyberPower/scripts/data_processing/functions_to_tidy_data")
CPI <- rio::import("../../../data/original_data/CPI/SummaryIndicators_2020March17.xlsx") # for debugging
print("importing done")
CPI_tidy <- CPI %>%
mutate(
country = as.factor(country)
) %>%
# mutate_at(vars(skep1,skep2,skep3,skep4,skep5, // for reverse coding
#                skep6,skep7,skep8,skep9),
#           funs(abs(.-8)))    // subtract from var "max+1"
arrange(country)
CPI <- rio::import("../../../data/original_data/CPI/SummaryIndicators_2020March18.xlsx") # for debugging
print("importing done")
CPI_tidy <- CPI %>%
mutate(
country = as.factor(country)
) %>%
# mutate_at(vars(skep1,skep2,skep3,skep4,skep5, // for reverse coding
#                skep6,skep7,skep8,skep9),
#           funs(abs(.-8)))    // subtract from var "max+1"
arrange(country)
saveRDS(CPI_tidy, file = "../../../data/processed_data/CPI_tidy.rds")
source("functions/clean_countries.R") # function to clean country names
setwd("~/Documents/GitHub/CyberPower/scripts/data_processing")
source("functions/clean_countries.R") # function to clean country names
# --- 1. Load Processed Datasets
CPI <- readRDS("../../data/processed_data/CPI_tidy.rds")
PENN <- readRDS("../../data/processed_data/PENN_tidy.rds")
ITU <- readRDS("../../data/processed_data/ITU_tidy.rds")
QoG_cs <- readRDS("../../data/processed_data/QoG_cs_tidy.rds")
CPI <- clean_countries(CPI, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
ITU <- clean_countries(ITU, path_to_country_dictionary)
# --- 1. Load Processed Datasets
CPI <- readRDS("../../data/processed_data/CPI_tidy.rds")
PENN <- readRDS("../../data/processed_data/PENN_tidy.rds")
ITU <- readRDS("../../data/processed_data/ITU_tidy.rds")
QoG_cs <- readRDS("../../data/processed_data/QoG_cs_tidy.rds")
# --- 2. Clean Countries Before Merging
path_to_country_dictionary = "../../data/processed_data/to_clean_countries/countries.csv"
CPI <- clean_countries(CPI, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
ITU <- clean_countries(ITU, path_to_country_dictionary)
setwd("~/Documents/GitHub/CyberPower/scripts/data_processing")
# --- 2. Clean Countries Before Merging
path_to_country_dictionary = "../../data/processed_data/to_clean_countries/countries.csv"
CPI <- clean_countries(CPI, path_to_country_dictionary)
source("functions/clean_countries.R") # function to clean country names
CPI <- clean_countries(CPI, path_to_country_dictionary)
PENN <- clean_countries(PENN, path_to_country_dictionary)
ITU <- clean_countries(ITU, path_to_country_dictionary)
QoG_cs <- clean_countries(QoG_cs, path_to_country_dictionary)
# --- we start by merging CPI to PENN:
# we do an left join, as we do not want countries that are not in the CPI
CPI_PENN <- left_join(CPI, PENN, by = c("consolidated_country")) %>%
arrange(consolidated_country) # set order by country, for aesthetics and readability
# --- then we merge ITU to CPI_PENN:
CPI_PENN_ITU <- left_join(CPI_PENN, ITU, by = c("consolidated_country"))
# --- then we merge QoG_cs to CPI_PENN_ITU:
# to reoder columns in dataframe: http://www.datasciencemadesimple.com/re-arrange-re-order-column-dataframe-r-using-dplyr/
CPI_PENN_ITU_QoG_cs <- left_join(CPI_PENN_ITU, QoG_cs, by = c("consolidated_country"))
CPI_2020 <- CPI_PENN_ITU_QoG_cs %>%
rename(country = consolidated_country) %>%
select(country, everything())
# --- 5. Saving
saveRDS(CPI_PENN_ITU_QoG_cs, file = "../../Data/Data for Modelling/CPI_2020.rds")
# --- 5. Saving
saveRDS(CPI_2020, file = "../../data/data_for_modelling/CPI_2020.rds")
View(CPI_2020)
View(CPI)
# --- 0. Setup
library(tidyverse)
source("functions/clean_countries.R") # function to clean country names
# --- 1. Load Processed Datasets
CPI <- readRDS("../../data/processed_data/CPI_tidy.rds")
View(CPI)
PENN <- readRDS("../../data/processed_data/PENN_tidy.rds")
ITU <- readRDS("../../data/processed_data/ITU_tidy.rds")
QoG_cs <- readRDS("../../data/processed_data/QoG_cs_tidy.rds")
# --- 2. Clean Countries Before Merging
path_to_country_dictionary = "../../data/processed_data/to_clean_countries/countries.csv"
CPI <- clean_countries(CPI, path_to_country_dictionary)
View(CPI)
# --- 0. Setup
library(tidyverse)
source("functions/clean_countries.R") # function to clean country names
# --- 1. Load Processed Datasets
CPI <- readRDS("../../data/processed_data/CPI_tidy.rds")
PENN <- readRDS("../../data/processed_data/PENN_tidy.rds")
ITU <- readRDS("../../data/processed_data/ITU_tidy.rds")
QoG_cs <- readRDS("../../data/processed_data/QoG_cs_tidy.rds")
# --- 2. Clean Countries Before Merging
path_to_country_dictionary = "../../data/processed_data/to_clean_countries/countries.csv"
CPI <- clean_countries(CPI, path_to_country_dictionary)
View(CPI)
PENN <- clean_countries(PENN, path_to_country_dictionary)
ITU <- clean_countries(ITU, path_to_country_dictionary)
QoG_cs <- clean_countries(QoG_cs, path_to_country_dictionary)
# --- we start by merging CPI to PENN:
# we do an left join, as we do not want countries that are not in the CPI
CPI_PENN <- left_join(CPI, PENN, by = c("consolidated_country")) %>%
arrange(consolidated_country) # set order by country, for aesthetics and readability
# --- then we merge ITU to CPI_PENN:
CPI_PENN_ITU <- left_join(CPI_PENN, ITU, by = c("consolidated_country"))
# --- then we merge QoG_cs to CPI_PENN_ITU:
# to reoder columns in dataframe: http://www.datasciencemadesimple.com/re-arrange-re-order-column-dataframe-r-using-dplyr/
CPI_PENN_ITU_QoG_cs <- left_join(CPI_PENN_ITU, QoG_cs, by = c("consolidated_country"))
CPI_2020 <- CPI_PENN_ITU_QoG_cs %>%
rename(country = consolidated_country) %>%
select(country, everything()) # reorder columns so that country is first column
View(CPI_2020)
CPI_2020 <- CPI_PENN_ITU_QoG_cs %>%
rename(country = consolidated_country) %>%
select(country, everything()) %>%     # reorder columns so that country is first column
select(-year)
# --- 5. Saving
saveRDS(CPI_2020, file = "../../data/data_for_modelling/CPI_2020.rds")
setwd("~/Documents/GitHub/CyberPower/scripts/data_processing")
library(foreign)
CPI_2020 <- readRDS(CPI_2020, file = "../../data/data_for_modelling/CPI_2020.rds")
CPI_2020 <- readRDS(CPI_2020, file = "../../data/data_for_modelling/CPI_2020.rds")
setwd("~/Documents/GitHub/CyberPower/scripts/data_processing")
CPI_2020 <- readRDS(CPI_2020, file = "../../data/data_for_modelling/CPI_2020.rds")
CPI_2020 <- readRDS("../../data/data_for_modelling/CPI_2020.rds")
write.dta(CPI_2020,  file = "../../ddta/data_for_modelling/CPI_2020.dta")
write.dta(CPI_2020,  file = "../../data/data_for_modelling/CPI_2020.dta")
# --- 1. Load Processed Data
CPI <- readRDS("../../data/processed_data/CPI_2020.rds")
setwd("~/Documents/GitHub/CyberPower/scripts/modelling")
# --- 1. Load Processed Data
CPI <- readRDS("../../data/data_for_modelling/CPI_2020.rds")
glmipse(CPI)
library(dplyr)
glimpse(CPI)
View(CPI)
CPI_capita <- CPI %>%
mutate(ecommerce_capita = ecommerce/pop)
View(CPI_capita)
CPI_capita <- CPI %>%
mutate(ecommerce_capita = ecommerce/pop, patent_app_capita= patent_application/pop)
glimpse(CPI_capita)
# --- 0. Setup
library(tidyverse)
library(foreign)
library(dplyr)
# --- 1. Load Processed Data
CPI <- readRDS("../../data/data_for_modelling/CPI_2020.rds")
# --- 3. Per capita
CPI_capita <- CPI %>%
mutate(ecommerce_capita = ecommerce/pop, patent_app_capita= patent_application/pop)
# --- 5. Saving
saveRDS(CPI_2020rec, file = "../../data/data_for_modelling/CPI_2020.rds")
# --- 5. Saving
saveRDS(CPI_capita, file = "../../data/data_for_modelling/CPI_2020rec.rds")
# --- 5. Saving
saveRDS(CPI_capita, file = "../../data/data_for_modelling/CPI_2020.rds")
setwd("~/Documents/GitHub/CyberPower/scripts/data_processing")
# --- 0. Setup
library(tidyverse)
library(foreign)
library(dplyr)
# --- 1. Load Processed Data
CPI <- readRDS("../../data/data_for_modelling/CPI_2020.rds")
# --- 3. Per capita
CPI_capita <- CPI %>%
mutate(ecommerce_capita = ecommerce/pop, patent_app_capita= patent_application/pop)
# --- 5. Saving
saveRDS(CPI_capita, file = "../../data/data_for_modelling/CPI_2020.rds")
install.packages("Compind")
library(Compind)
rm(list=ls())
getwd()
library(foreign)
library("xtable")
library(xtable)
library("Compind")
rm(list=ls())
# --- 0. Setup
library(tidyverse)
library(foreign)
library(dplyr)
library(compind)
library(Compind)
CPI <- readRDS("../../data/data_for_modelling/CPI_2020.rds")
View(CPI)
glimpse (XPI)
glimpse (CPI)
# Standard z-scores normalisation #
CPI_norm = normalise_ci(CPI,c(2:13),c("NEG","POS"),method=1,z.mean=0, z.std=1)
# Standard z-scores normalisation #
CPI_norm = normalise_ci(CPI,c(2:3),c("NEG","POS"),method=1,z.mean=0, z.std=1)
summary(CPI_norm$ci_norm)
# Standard z-scores normalisation
CPI_norm = normalise_ci(CPI,c(2:13),c("NEG","POS", "NEG","POS", "POS", "POS", "POS", "NEG","POS","POS","POS","POS"),method=1,z.mean=0, z.std=1)
View(CPI_norm)
View(CPI_norm)
View(CPI)
# Factor analysis
data(CPI)
CI = ci_factor(CPI,c(2:13), method="ALL")
View(CI)
# Factor analysis after normalization
CI3 = ci_factor(CPI_norm$ci_norm,c(2:13),method="CH", dim=3)
# Factor analysis after normalization
CI3 = ci_factor(CPI_norm$ci_norm,c(2:5),method="CH", dim=3)
View(CI3)
summary(CPI_norm$ci_norm)
# Factor analysis after normalization
CI3 = ci_factor(CPI_norm$ci_norm,c(1:5),method="CH", dim=3)
# Factor analysis after normalization
CI3 = ci_factor(CPI_norm$ci_norm,c(1:12),method="CH", dim=3)
summ = summary(as.data.frame(CI1$ci_factor_est))
summ = summary(as.data.frame(CI3$ci_factor_est))
print(xtable(summ,caption = "Factor Analysis scores based
on first 3 components",label="tab_factor1"),
include.rownames=FALSE)
install.packages("xtable")
library("xtable")
print(xtable(summ,caption = "Factor Analysis scores based
on first 3 components",label="tab_factor1"),
include.rownames=FALSE)
print(xtable(summ,caption = "Factor Analysis scores based
on first 12 components",label="tab_factor1"),
include.rownames=FALSE)
# --- 0. Setup
library(tidyverse)
library(foreign)
library(dplyr)
library(Compind)
library(xtable)
# -------------- DATA IMPORT
CPI <- readRDS("../../data/data_for_modelling/CPI_2020.rds")
# Standard z-scores normalisation
data_norm = normalise_ci(CPI,c(2:13),c("NEG","POS","NEG","POS","POS","POS","POS","NEG","POS","POS","POS","POS"),method=1,z.mean=0, z.std=1)
summary(data_norm$ci_norm)
# Factor analysis
CI1 = ci_factor(data_norm$ci_norm,c(1:12),method="CH", dim=3)
summ = summary(as.data.frame(CI1$ci_factor_est))
print(xtable(summ,caption = "Factor Analysis scores based
on first 12 components",label="tab_factor1"),
include.rownames=FALSE)
CI = ci_bod(data_norm$ci_norm,c(1:2))
CI1 = ci_bod(data_norm$ci_norm,c(1:12))
CI1 = ci_bod(data_norm$ci_norm,c(1:12))
CPI_CI = data.frame(CPI, CI_est= CI1$ci_bod_est)
View(CPI_CI)
? data.frame
CPI_CI = data.frame(CPI, CI_est= ci_bod_est)
CPI_CI = data.frame(CPI, CI_est= CI1)
CPI_CI = data.frame(CPI, CI_est= CI1$ci_method)
# Standard z-scores normalisation
data_norm = normalise_ci(CPI,c(2:13),c("NEG","POS","NEG","POS","POS","POS","POS","NEG","POS","POS","POS","POS"),method=1,z.mean=0, z.std=1)
summary(data_norm$ci_norm)
# -------------- WEIGHTS and AGGREGATION
# check with compind manuals
# Benefit of the Doubt approach
CI1 = ci_bod(data_norm$ci_norm,c(1:12))
CPI_CI = data.frame(CPI, CI_est= CI1$ci_bod_est)
ggplot(data = CPI_CI, aes(x = i1, y = i2)) +
geom_point(aes(colour = CI_est),size=3)
View(CPI_CI)
ggplot(data = CPI_CI, aes(x = removal_google, y = freedom_net)) +
geom_point(aes(colour = CI_est),size=3)
# Factor analysis
CI2 = ci_factor(data_norm$ci_norm,c(1:12),method="CH", dim=3)
summ = summary(as.data.frame(CI2$ci_factor_est))
CPI_CI = data.frame(CPI, CI1_est= CI2$ci_factor_est)
CPI_CI = data.frame(CPI, CI2_est= CI2$ci_factor_est)
CPI_CI = data.frame(CPI, CI1_est= CI1$ci_bod_est)
# Standard z-scores normalisation
data_norm = normalise_ci(CPI,c(2:13),c("NEG","POS","NEG","POS","POS","POS","POS","NEG","POS","POS","POS","POS"),method=1,z.mean=0, z.std=1)
summary(data_norm$ci_norm)
# Benefit of the Doubt approach
CI1 = ci_bod(data_norm$ci_norm,c(1:12))
rm(list=ls())
# --- 0. Setup
library(tidyverse)
library(foreign)
library(dplyr)
library(Compind)
library(xtable)
# -------------- DATA IMPORT
CPI <- readRDS("../../data/data_for_modelling/CPI_2020.rds")
# Standard z-scores normalisation
data_norm = normalise_ci(CPI,c(2:13),c("NEG","POS","NEG","POS","POS","POS","POS","NEG","POS","POS","POS","POS"),method=1,z.mean=0, z.std=1)
# Benefit of the Doubt approach
CI1 = ci_bod(data_norm$ci_norm,c(1:12))
CPI_CI = data.frame(CPI, CI1_est= CI1$ci_bod_est)
# Factor analysis
CI2 = ci_factor(data_norm$ci_norm,c(1:12),method="CH", dim=3)
CPI_CI = data.frame(CPI, CI2_est= CI2$ci_factor_est)
View(CPI_CI)
CPI_CI = data.frame(CPI, CI1_est= CI1$ci_bod_est)
CPI_CI <- data.frame(CPI, CI2_est= CI2$ci_factor_est)
CPI_CI = data.frame(CPI, CI1_est= CI1$ci_bod_est)
View(CPI_CI)
# Factor analysis
CI2 = ci_factor(data_norm$ci_norm,c(1:12),method="CH", dim=3)
CPI_CI <- data.frame(CPI_CI, CI2_est= CI2$ci_factor_est)
CI3 = ci_generalized_mean(data_norm$ci_norm,c(2:3),p=2) # geometric mean
CI4 = ci_generalized_mean(data_norm$ci_norm,c(1:12),p=2) # geometric mean
CI3 = ci_generalized_mean(data_norm$ci_norm,c(1:12),p=2) # geometric mean
CPI_CI <- data.frame(CPI_CI, CI3_est= CI3$ci_generalized_mean_est)
# Min-Max
CI4 = ci_mean_min(data_norm$ci_norm, alpha=0.5, beta=1)
CPI_CI <- data.frame(CPI_CI, CI4_est= CI4$ci_mean_min_est)
# Weighting method based on geometric aggregation
CI5 = CI_geom_estimated = ci_geom_gen(data_norm$ci_norm,c(2:3),meth = "EQUAL")
# Weighting method based on geometric aggregation
CI5 = CI_geom_estimated = ci_geom_gen(data_norm$ci_norm,c(2:3),meth = "EQUAL")
summary(CI_geom_estimated$ci_mean_geom_est)
# Weighting method based on geometric aggregation
CI5 = CI_geom_estimated = ci_geom_gen(data_norm$ci_norm,c(1:12),meth = "EQUAL")
summary(CI_geom_estimated$ci_mean_geom_est)
# Mazziotta-Pareto Index (MPI) method
CI6 = ci_mpi(data_norm$ci_norm, penalty="NEG")
summ = summary(as.data.frame(CI6$ci_mpi_est))
summary(as.data.frame(CI6$ci_mpi_est))
CI7 = ci_wroclaw(data_norm$ci_norm,c(1:2))
summary(as.data.frame(CI7$ci_wroclaw_est))
# Generalized mean
# CI3 = ci_generalized_mean(EU_NUTS1,c(2:3),p=2) # geometric mean
CI3 = ci_generalized_mean(data_norm$ci_norm,c(1:12),p=1) # geometric mean
CPI_CI <- data.frame(CPI_CI, CI3_est= CI3$ci_generalized_mean_est)
# Generalized mean
# CI3 = ci_generalized_mean(EU_NUTS1,c(2:3),p=2) # geometric mean
CI3 = ci_generalized_mean(data_norm$ci_norm,c(1:2),p=1) # arithmetic mean
CPI_CI <- data.frame(CPI_CI, CI3_est= CI3$ci_generalized_mean_est)
# Standard z-scores normalisation
data_norm = normalise_ci(CPI,c(2:13),c("NEG","POS","NEG","POS","POS","POS","POS","NEG","POS","POS","POS","POS"),method=1,z.mean=0, z.std=1)
summary(data_norm$ci_norm)
rm(list=ls())
# -------------- DATA IMPORT
CPI <- readRDS("../../data/data_for_modelling/CPI_2020.rds")
# Standard z-scores normalisation
data_norm = normalise_ci(CPI,c(2:13),c("NEG","POS","NEG","POS","POS","POS","POS","NEG","POS","POS","POS","POS"),method=1,z.mean=0, z.std=1)
summary(data_norm$ci_norm)
# Generalized mean
# CI3 = ci_generalized_mean(EU_NUTS1,c(2:3),p=2) # geometric mean
CI3 = ci_generalized_mean(data_norm$ci_norm,c(1:3),p=1) # arithmetic mean
CPI_CI <- data.frame(CPI_CI, CI3_est= CI3$ci_generalized_mean_est)
