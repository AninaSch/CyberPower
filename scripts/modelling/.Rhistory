# group_by(country) %>%
# mutate(score_capabilities = mean(c(score_surveillance, score_defense, score_control, score_defense,
#                                 score_commercial, score_offense, score_norms), na.rm = TRUE ))
#### FUNCTION
CPI_quadrant <- CPI_scores %>%
select(country, pop, score_capabilities, score_intent,
score_surveillance, score_defense, score_control, score_intelligence, score_commercial, score_offense, score_norms,
intent_surveillance, intent_defense, intent_control, intent_intelligence, intent_commercial, intent_offense, intent_norms)
# %>%
#   mutate(quadrant = case_when(score_capabilities > x_mid & score_intent > y_mid   ~ "High Capability &\n High Intent",
#                               score_capabilities <= x_mid & score_intent > y_mid  ~ "Low Capability &\n High Intent",
#                               score_capabilities <= x_mid & score_intent <= y_mid ~ "Low Capability &\n Low Intent",
#                               TRUE                                         ~ "High Capability &\n Low Intent"))
x_mid <- mean(c(max(CPI_quadrant$score_capabilities, na.rm = TRUE),
min(CPI_quadrant$score_capabilities, na.rm = TRUE)))
y_mid <- mean(c(max(CPI_quadrant$score_intent, na.rm = TRUE),
min(CPI_quadrant$score_intent, na.rm = TRUE)))
my_palette <- c( "#4db848", "#4e88c7", "#fcb315", "#ed1b34")
intent_times_capab <-   function (.data, ...) {
.data  %>%
mutate(quadrant = case_when(.data[[capabilities]] > x_mid & .data[[intent]] > y_mid   ~ "High Capability &\n High Intent",
.data[[capabilities]] <= x_mid & .data[[intent]] > y_mid  ~ "Low Capability &\n High Intent",
.data[[capabilities]] <= x_mid & .data[[intent]] <= y_mid ~ "Low Capability &\n Low Intent",
TRUE                                         ~ "High Capability &\n Low Intent")) %>%
ggplot(aes(x = .data[[capabilities]], y =  .data[[intent]], label = .data[[label]] , color = quadrant)) +
geom_vline(xintercept = x_mid) + # plot vertical line
geom_hline(yintercept = y_mid) + # plot horizontal line
geom_point() +
crimson_theme() +
theme_minimal() +
theme(axis.title = element_text(size = 15)) +
geom_point(aes(),size=3) +
geom_text_repel(aes(), hjust = -0.10, nudge_x = 0.05, color="black") +
ggtitle("") +
labs(x = labs_x , y = labs_y) +
theme(legend.position="bottom") +
scale_y_continuous(breaks = seq(0, 1, by = 0.10), limits = c(-0.03,1.03), expand = c(0,0)) +
scale_x_continuous(breaks = seq(0, 100, by = 10), limits = c(-3,103), expand = c(0,0)) +
scale_color_manual(values = my_palette, name = "Quadrant",
labels = c("Higher Capability &\n Higher Intent","Higher Capability &\n Lower Intent", "Lower Capability &\n Higher Intent", "Lower Capability &\n Lower Intent")) +
annotate("text", x=90, y=0.95, label= "Higher Capability &\n Higher Intent", size=6, color="#4db848", fontface = 'bold') +
annotate("text", x=10, y=0.95, label= "Lower Capability &\n Higher Intent", size=6, color="#fcb315", fontface = 'bold') +
annotate("text", x=90, y=0.05, label= "Higher Capability &\n Lower Intent", size=6, color="#4e88c7", fontface = 'bold') +
annotate("text", x=10, y=0.05, label= "Lower Capability &\n Lower Intent", size=6, color="#ed1b34", fontface = 'bold')  +
guides(color = FALSE)
}
#### SURVEILLANCE
capabilities = "score_surveillance"
intent = "intent_surveillance"
labs_x = "Surveillance Capability Score"
labs_y =  "Surveillance Intent Score"
label = "country"
quadrant = "quandrant"
p_quad_surveillance <- CPI_quadrant %>%  intent_times_capab(capabilities, intent, labs_x, labs_y, label, quadrant)
ggsave(p_quad_surveillance, file = "../../findings/Quad_Cap_Intent_surveillance.eps", width = 17, height = 12, device='eps')
crimson_theme <- function() {
# font <- "Georgia"   #assign font family up front
theme_minimal() %+replace%    #replace elements we want to change
theme(
# add border 1)
panel.border = element_rect(colour = "blue", fill = NA, linetype = 2),
# color background 2)
panel.background = element_rect(fill = "aliceblue"),
# modify grid 3)
panel.grid.major.x = element_line(colour = "#A51C30", linetype = 3, size = 0.5),
panel.grid.minor.x = element_blank(),
panel.grid.major.y =  element_line(colour = "#A51C30", linetype = 3, size = 0.5),
panel.grid.minor.y = element_blank(),
axis.title = element_text(size = 15),
# modify text, axis and colour 4) and 5)
# axis.text = element_text(colour = "black", face = "italic", family = "Times New Roman"),
# axis.title = element_text(colour = "black", family = "Times New Roman"),
axis.ticks = element_line(colour = "black"),
# legend at the bottom 6)
legend.position = "bottom"
)
}
#### SURVEILLANCE
capabilities = "score_surveillance"
intent = "intent_surveillance"
labs_x = "Surveillance Capability Score"
labs_y =  "Surveillance Intent Score"
label = "country"
quadrant = "quandrant"
p_quad_surveillance <- CPI_quadrant %>%  intent_times_capab(capabilities, intent, labs_x, labs_y, label, quadrant)
ggsave(p_quad_surveillance, file = "../../findings/Quad_Cap_Intent_surveillance.eps", width = 17, height = 12, device='eps')
setwd("~/Documents/GitHub/CyberPower/scripts/modelling")
# TO DO
# ADD OVERALL INTENT SCORE
# can we combine indicators that do not correlate?
#   https://www.researchgate.net/post/How_to_check_statistically_whether_two_or_more_variables_can_be_combined_into_one_derived_variable
rm(list=ls())
# -------------- SETUP
library(tidyverse)
library(hrbrthemes)
library(kableExtra)
options(knitr.table.format = "html")
# library(viridisLite) # this package might cause problesm
library(viridis)
# -------------- DATA IMPORT
CPI_scores <- readRDS("../../data/data_for_modelling/CPI_scores.rds")
# gr
# -------------- VISUALIZATION - STACKED CIRCULAR BARPLOT INTENT
# https://tidyr.tidyverse.org/reference/pivot_longer.html
# https://forcats.tidyverse.org/reference/fct_reorder.html # reorder factors
# https://ggplot2.tidyverse.org/reference/scale_manual.html # These functions allow you to specify your own set of mappings from levels in the data to aesthetic values.
CPI_scores <- readRDS("../../data/data_for_modelling/CPI_scores.rds")
# select and order data
tmp <- CPI_scores %>%
select(country, intent_surveillance, intent_defense, intent_control, intent_intelligence, intent_commercial, intent_offense, intent_norms) %>%
# filter(!is.na(intent_surveillance)) %>%
# arrange(desc(intent_surveillance)) %>%
ungroup(country) %>%
mutate(country=factor(country, country)) %>% # what does this do?
mutate(sum_tot = rowSums(.[2:8])) # sum to compute order for fct_reorder
tmp$country <- fct_reorder(tmp$country, -tmp$sum_tot) # reorder the factor levels by tot
tmp <- tmp %>% select(-sum_tot) # remove not useful total
# pivot data
tmp <- tmp %>%
pivot_longer(-country, names_to = "observation", values_to = "value",   values_drop_na = FALSE) %>%
mutate(value = (value/7)*100) # divide by 7, so that sum = average
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 2
nObsType <- nlevels(as.factor(tmp$observation))
to_add <- data.frame( matrix(NA, empty_bar*nlevels(tmp$country)*nObsType, ncol(tmp)) )
colnames(to_add) <- colnames(tmp)
to_add$country <- rep(levels(tmp$country), each=empty_bar*nObsType )
tmp <- rbind(tmp, to_add)
tmp <- tmp %>% arrange(country, observation)
tmp$id <- rep( seq(1, nrow(tmp)/nObsType) , each=nObsType)
# Get the name and the y position of each label
label_data <- tmp %>%
group_by(id, country) %>%
summarise(tot = round(sum(value), 1)) # put summarise instead of summarize
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
label_data$country <- gsub("United States", "US", label_data$country)
label_data$country <- gsub("United Kingdom", "UK", label_data$country)
label_data$country <- paste(label_data$country, " (", label_data$tot,")", sep="")
# prepare a data frame for base lines
base_data <- tmp %>%
group_by(country) %>%
summarise(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# my_palette <- c("#ec8f9c", "#93a1ad", "#cbdb2a", "#95b5df", "#ffde2d", "#77ced9", "#bb89ca")
my_palette <- c("#ed1b34", "#000000", "#4db848", "#4e88c7", "#fcb315", "#00aaad", "#946eb7")
# https://www.seas.harvard.edu/office-communications/brand-style-guide/color-palette
# grey, black, green, blue, warm yellow, turquoise, purple
# Make the plot
p <- ggplot(tmp) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat="identity", alpha=0.8) +
scale_fill_manual(values = my_palette, name = "Objectives", labels = c("Surveillance","Defense", "Control", "Intelligence", "Commerce", "Offense", "Norms")) +
# scale_fill_viridis(discrete=TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
ggplot2::annotate("text", x = rep(max(tmp$id),6), y = c(0, 20,40, 60, 80, 100), label = c("0", "20", "40", "60", "80", "100") , color="grey", size=3 , angle=0, fontface="bold", hjust=1)+
# ylim(-50, max(label_data$tot, na.rm=T)) + # chnage value to change size of circle
ylim(-80, max(110, na.rm=T)) + # chnage value to change size of circle
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot+3, label=country), color="black", fontface="bold",alpha=0.6, size=3, angle= label_data$angle, inherit.aes = FALSE, hjust=label_data$hjust) +
# geom_text(data=label_data, aes(x=id, y=tot+10, label=country, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=3, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )
# geom_text(data=base_data, aes(x = title, y = -18, label=country), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
# Save at png
ggsave(p, file = "../../findings/Intent_Index.eps", width=10, height=10, device=cairo_ps)
# can we combine indicators that do not correlate?
#   https://www.researchgate.net/post/How_to_check_statistically_whether_two_or_more_variables_can_be_combined_into_one_derived_variable
rm(list=ls())
#
# setEPS()
# postscript("whatever.eps")
# https://stackoverflow.com/questions/4001316/how-do-i-preserve-transparency-in-ggplot2
# --- 0. Setup
# install.packages("GGally")
library(tidyverse)
library(foreign)
library(dplyr)
library(Compind)
library(xtable)
library(ggplot2)
library(GGally)
library(Hmisc)
library(ggcorrplot)
library(ggrepel) # ggrepel provides geoms for ggplot2 to repel overlapping text labels: geom_text_repel() geom_label_repel()
# https://github.com/slowkow/ggrepel
# library radarchart
library(fmsb)
library(colormap)
# source("bgdp_functions.R")
# -------------- DATA IMPORT
CPI_scores <- readRDS("../../data/data_for_modelling/CPI_scores.rds")
crimson_theme <- function() {
# font <- "Georgia"   #assign font family up front
theme_minimal() %+replace%    #replace elements we want to change
theme(
# add border 1)
panel.border = element_rect(colour = "blue", fill = NA, linetype = 2),
# color background 2)
panel.background = element_rect(fill = "aliceblue"),
# modify grid 3)
panel.grid.major.x = element_line(colour = "#A51C30", linetype = 3, size = 0.5),
panel.grid.minor.x = element_blank(),
panel.grid.major.y =  element_line(colour = "#A51C30", linetype = 3, size = 0.5),
panel.grid.minor.y = element_blank(),
axis.title = element_text(size = 15),
# modify text, axis and colour 4) and 5)
# axis.text = element_text(colour = "black", face = "italic", family = "Times New Roman"),
# axis.title = element_text(colour = "black", family = "Times New Roman"),
axis.ticks = element_line(colour = "black"),
# legend at the bottom 6)
legend.position = "bottom"
)
}
# 15 PLOTS
all <- CPI_scores %>%
ungroup(country) %>%
select(country, Surveillance = score_surveillance, Defense = score_defense, `Information\nControl` = score_control,
Intel = score_intelligence, Commerce = score_commercial, Offense = score_offense, Norms = score_norms) %>%
# filter(country == "Australia" | country == "Brazil" | country == "Canada" | country == "China" | country== "DPRK"| country == "Egypt" |
filter(country == "Australia" | country == "Brazil" | country == "Canada" | country == "China" |  country == "Egypt" |
country == "Estonia" |country == "France" | country == "Germany" | country == "India" | country == "Iran" | country == "Israel" |
country == "Italy" | country == "Japan" | country == "Lithuania" | country == "Malaysia"  ) %>%
select (-country)
all <- rbind(rep(100,10) , rep(0,10) , all)
# Prepare color
# colors_border=colormap(colormap=colormaps$viridis, nshades=15, alpha=1)
# colors_in=colormap(colormap=colormaps$viridis, nshades=15, alpha=0.3)
# Prepare title
mytitle <- c("Australia\n",  "Brazil\n",  "Canada\n", "China\n","Egypt\n",
"Estonia\n", "France\n","Germany\n", "India\n", "Iran\n","Israel\n",
"Italy\n", "Japan\n","Lithuania\n" , "Malaysia\n" )
# Split the screen in 6 parts
par(mfrow=c(5,3))
# adapt margins
# https://www.r-graph-gallery.com/74-margin-and-oma-cheatsheet.html
# par(mar=rep(0.8,4))
par(mar=c(2,2,2,2))
# Loop for each plot
radar1 <- for(i in 1:15){
# Custom the radarChart !
radarchart( all[c(1,2,i+2),], axistype=1,
#custom polygon
pcol='#A51C30', pfcol=rgb(0.94, 0.97, 1 , 0.8) , plwd=4, plty=1 ,
# pcol=rgb(0.165,0.28,0.48, 1), pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4, plty=1 ,
# pcol=colors_border[i] , pfcol=colors_in[i] , plwd=4, plty=1 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,80,20), cglwd=0.8,
#custom labels
vlcex=1.0,
#title
title=mytitle[i]
)
}
ggsave(radar1, file = "../../findings/Capabilities_Radar1.eps", device=cairo_ps)
# 15 PLOTS
all <- CPI_scores %>%
ungroup(country) %>%
select(country, Surveillance = score_surveillance, Defense = score_defense, `Information\nControl` = score_control,
Intel = score_intelligence, Commerce = score_commercial, Offense = score_offense, Norms = score_norms) %>%
filter( country == "Netherlands"| country == "New Zealand"| country == "ROK"| country == "Russia" | country == "Saudi Arabia" |
country == "Singapore" | country == "Spain" | country == "Sweden" | country == "Switzerland" | country == "Turkey" | country == "Ukraine" |
country == "United Kingdom" | country == "United States" | country == "Vietnam") %>%
select (-country)
all <- rbind(rep(100,10) , rep(0,10) , all)
# Prepare color
# colors_border=colormap(colormap=colormaps$viridis, nshades=15, alpha=1)
# colors_in=colormap(colormap=colormaps$viridis, nshades=15, alpha=0.3)
# Prepare title
mytitle <- c( "Netherlands\n" , "New Zealand\n", "ROK\n", "Russia\n",  "Saudi Arabia\n",
"Singapore\n",  "Spain\n", "Sweden\n", "Switzerland\n","Turkey\n", "Ukraine\n",
"United Kingdom\n", "United States\n", "Vietnam\n")
# Split the screen in 6 parts
par(mfrow=c(5,3))
# adapt margins
# https://www.r-graph-gallery.com/74-margin-and-oma-cheatsheet.html
# par(mar=rep(0.8,4))
par(mar=c(2,2,2,2))
# Loop for each plot
# radar2 <-  for(i in 1:15){
radar2 <-
for(i in 1:14){
# Custom the radarChart !
radarchart( all[c(1,2,i+2),], axistype=1,
#custom polygon
pcol='#A51C30', pfcol=rgb(0.94, 0.97, 1 , 0.8) , plwd=4, plty=1 ,
# pcol=colors_border[i] , pfcol=colors_in[i] , plwd=4, plty=1 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,80,20), # cglwd=0.8,
#custom labels
vlcex=1.0,
#title
title=mytitle[i]
)
}
# TO DO
# ADD OVERALL INTENT SCORE
# can we combine indicators that do not correlate?
#   https://www.researchgate.net/post/How_to_check_statistically_whether_two_or_more_variables_can_be_combined_into_one_derived_variable
rm(list=ls())
# -------------- SETUP
library(tidyverse)
library(hrbrthemes)
library(kableExtra)
options(knitr.table.format = "html")
# library(viridisLite) # this package might cause problesm
library(viridis)
# -------------- DATA IMPORT
CPI_scores <- readRDS("../../data/data_for_modelling/CPI_scores.rds")
# group_by(country) %>%
# mutate(score_capabilities = mean(c(score_surveillance, score_defense, score_control, score_defense,
#                                 score_commercial, score_offense, score_norms), na.rm = TRUE ))
# -------------- VISUALIZATION - STACKED CIRCULAR BARPLOT INTENT
# https://tidyr.tidyverse.org/reference/pivot_longer.html
# https://forcats.tidyverse.org/reference/fct_reorder.html # reorder factors
# https://ggplot2.tidyverse.org/reference/scale_manual.html # These functions allow you to specify your own set of mappings from levels in the data to aesthetic values.
CPI_scores <- readRDS("../../data/data_for_modelling/CPI_scores.rds")
# select and order data
tmp <- CPI_scores %>%
select(country, intent_surveillance, intent_defense, intent_control, intent_intelligence, intent_commercial, intent_offense, intent_norms) %>%
# filter(!is.na(intent_surveillance)) %>%
# arrange(desc(intent_surveillance)) %>%
ungroup(country) %>%
mutate(country=factor(country, country)) %>% # what does this do?
mutate(sum_tot = rowSums(.[2:8])) # sum to compute order for fct_reorder
tmp$country <- fct_reorder(tmp$country, -tmp$sum_tot) # reorder the factor levels by tot
tmp <- tmp %>% select(-sum_tot) # remove not useful total
# pivot data
tmp <- tmp %>%
pivot_longer(-country, names_to = "observation", values_to = "value",   values_drop_na = FALSE) %>%
mutate(value = (value/7)*100) # divide by 7, so that sum = average
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 2
nObsType <- nlevels(as.factor(tmp$observation))
to_add <- data.frame( matrix(NA, empty_bar*nlevels(tmp$country)*nObsType, ncol(tmp)) )
colnames(to_add) <- colnames(tmp)
to_add$country <- rep(levels(tmp$country), each=empty_bar*nObsType )
tmp <- rbind(tmp, to_add)
tmp <- tmp %>% arrange(country, observation)
tmp$id <- rep( seq(1, nrow(tmp)/nObsType) , each=nObsType)
# Get the name and the y position of each label
label_data <- tmp %>%
group_by(id, country) %>%
summarise(tot = round(sum(value), 1)) # put summarise instead of summarize
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
label_data$country <- gsub("United States", "US", label_data$country)
label_data$country <- gsub("United Kingdom", "UK", label_data$country)
label_data$country <- paste(label_data$country, " (", label_data$tot,")", sep="")
# prepare a data frame for base lines
base_data <- tmp %>%
group_by(country) %>%
summarise(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# my_palette <- c("#ec8f9c", "#93a1ad", "#cbdb2a", "#95b5df", "#ffde2d", "#77ced9", "#bb89ca")
my_palette <- c("#ed1b34", "#000000", "#4db848", "#4e88c7", "#fcb315", "#00aaad", "#946eb7")
# https://www.seas.harvard.edu/office-communications/brand-style-guide/color-palette
# grey, black, green, blue, warm yellow, turquoise, purple
# Make the plot
p <- ggplot(tmp) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat="identity", alpha=0.8) +
scale_fill_manual(values = my_palette, name = "Objectives", labels = c("Surveillance","Defense", "Control", "Intelligence", "Commerce", "Offense", "Norms")) +
# scale_fill_viridis(discrete=TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
ggplot2::annotate("text", x = rep(max(tmp$id),6), y = c(0, 20,40, 60, 80, 100), label = c("0", "20", "40", "60", "80", "100") , color="grey", size=3 , angle=0, fontface="bold", hjust=1)+
# ylim(-50, max(label_data$tot, na.rm=T)) + # chnage value to change size of circle
ylim(-80, max(110, na.rm=T)) + # chnage value to change size of circle
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot+3, label=country), color="black", fontface="bold",alpha=0.6, size=3, angle= label_data$angle, inherit.aes = FALSE, hjust=label_data$hjust) +
# geom_text(data=label_data, aes(x=id, y=tot+10, label=country, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=3, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )
# geom_text(data=base_data, aes(x = title, y = -18, label=country), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
# -------------- VISUALIZATION - STACKED CIRCULAR BARPLOT INTENT
# https://tidyr.tidyverse.org/reference/pivot_longer.html
# https://forcats.tidyverse.org/reference/fct_reorder.html # reorder factors
# https://ggplot2.tidyverse.org/reference/scale_manual.html # These functions allow you to specify your own set of mappings from levels in the data to aesthetic values.
CPI_scores <- readRDS("../../data/data_for_modelling/CPI_scores.rds")
# select and order data
tmp <- CPI_scores %>%
select(country, intent_surveillance, intent_defense, intent_control, intent_intelligence, intent_commercial, intent_offense, intent_norms) %>%
# filter(!is.na(intent_surveillance)) %>%
# arrange(desc(intent_surveillance)) %>%
ungroup(country) %>%
mutate(country=factor(country, country)) %>% # what does this do?
mutate(sum_tot = rowSums(.[2:8])) # sum to compute order for fct_reorder
tmp$country <- fct_reorder(tmp$country, -tmp$sum_tot) # reorder the factor levels by tot
tmp <- tmp %>% select(-sum_tot) # remove not useful total
# pivot data
tmp <- tmp %>%
pivot_longer(-country, names_to = "observation", values_to = "value",   values_drop_na = FALSE) %>%
mutate(value = (value/7)*100) # divide by 7, so that sum = average
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 2
nObsType <- nlevels(as.factor(tmp$observation))
to_add <- data.frame( matrix(NA, empty_bar*nlevels(tmp$country)*nObsType, ncol(tmp)) )
colnames(to_add) <- colnames(tmp)
to_add$country <- rep(levels(tmp$country), each=empty_bar*nObsType )
tmp <- rbind(tmp, to_add)
tmp <- tmp %>% arrange(country, observation)
tmp$id <- rep( seq(1, nrow(tmp)/nObsType) , each=nObsType)
# Get the name and the y position of each label
label_data <- tmp %>%
group_by(id, country) %>%
summarise(tot = round(sum(value), 1)) # put summarise instead of summarize
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
label_data$country <- gsub("United States", "US", label_data$country)
label_data$country <- gsub("United Kingdom", "UK", label_data$country)
label_data$country <- paste(label_data$country, " (", label_data$tot,")", sep="")
# prepare a data frame for base lines
base_data <- tmp %>%
group_by(country) %>%
summarise(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# my_palette <- c("#ec8f9c", "#93a1ad", "#cbdb2a", "#95b5df", "#ffde2d", "#77ced9", "#bb89ca")
my_palette <- c("#ed1b34", "#000000", "#4db848", "#4e88c7", "#fcb315", "#00aaad", "#946eb7")
# https://www.seas.harvard.edu/office-communications/brand-style-guide/color-palette
# grey, black, green, blue, warm yellow, turquoise, purple
# Make the plot
p <- ggplot(tmp) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat="identity", alpha=0.8) +
scale_fill_manual(values = my_palette, name = "Objectives", labels = c("Surveillance","Defense", "Control", "Intelligence", "Commerce", "Offense", "Norms")) +
# scale_fill_viridis(discrete=TRUE) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
ggplot2::annotate("text", x = rep(max(tmp$id),6), y = c(0, 20,40, 60, 80, 100), label = c("0", "20", "40", "60", "80", "100") , color="grey", size=3 , angle=0, fontface="bold", hjust=1)+
# ylim(-50, max(label_data$tot, na.rm=T)) + # chnage value to change size of circle
ylim(-80, max(110, na.rm=T)) + # chnage value to change size of circle
theme_minimal() +
theme(
legend.position = "right",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot+3, label=country), color="black", fontface="bold",alpha=0.6, size=3, angle= label_data$angle, inherit.aes = FALSE, hjust=label_data$hjust) +
# geom_text(data=label_data, aes(x=id, y=tot+10, label=country, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=3, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )
# geom_text(data=base_data, aes(x = title, y = -18, label=country), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
ggsave(p, file = "../../findings/Intent_Index.eps", width=10, height=10, device=cairo_ps)
ggsave(p, file = "../../findings/Intent_Index.eps", width=15, height=10, device=cairo_ps)
